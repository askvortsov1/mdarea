{"version":3,"sources":["mdarea.js"],"names":["root","factory","define","amd","module","exports","MarkdownArea","self","this","ctrlKey","test","navigator","platform","reInlineKey","rePrefix","reList","reCleanIndent","rePureIndent","reIncrement","reStripLast","reMkIndent","parentheses","[","(","{","<","elem","_useTab","_useInline","_indent","_reOutdent","_reKey","makeKeyRe","_handleKey","bind","setElement","tab","inline","RegExp","apply","value","s","n","selectionStart","selectionEnd","prototype","constructor","getElement","_elem","removeEventListener","addEventListener","getValue","setValue","getIndent","setIndent","indent","Array","join","replace","isTabUsed","useTab","ignoreTab","isInlineEnabled","enableInline","disableInline","destroy","evt","key","preventDefault","prefix","target","substring","selection","postfix","shift","info","str","offset","lastIndexOf","line","m","exec","_","parseInt","pure","length","handleEnterKey","shiftKey","handleIndentKey","reOutdent","handleOutdentKey"],"mappings":"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","file":"mdarea.min.js","sourcesContent":["(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        root.MarkdownArea = factory();\n    }\n})(typeof self !== 'undefined' ? self : this, function() {\n\n    var isMac = /mac|iphone|ipad|ipod/i.test(navigator.platform),\n        ctrlKey = isMac ? 'metaKey' : 'ctrlKey',\n        reInlineKey = /^[`*_[({<]$/,\n        rePrefix = /^[ \\t]*(?:(?:[-+*]|\\d+\\.)[ \\t]+(?:\\[[ x]][ \\t]+)?|>[ \\t]*)*(?::[ \\t]*)?/,\n        reList = /(?:[-+*]|\\d+\\.)[ \\t]+(?:\\[[ x]][ \\t]+)?$/,\n        reCleanIndent = /[-+*\\[\\]x\\d.]/g,\n        rePureIndent = /[^ \\t]/g,\n        reIncrement = /(\\d+)\\.(?=[ \\t]+$)/,\n        reStripLast = /(?:(?:^[ \\t]+)?(?:[-+*]|\\d+\\.|[>:])(?:[ \\t]+\\[[ x]])?[ \\t]*|^[ \\t]+)$/,\n        reMkIndent = /^(?!$)/mg,\n        parentheses = {'[': ']', '(': ')', '{': '}', '<': '>'};\n\n\n    function MarkdownArea(elem) {\n        this._useTab = true;\n        this._useInline = true;\n        this._indent = '    ';\n        this._reOutdent = /^[ ]{4}/mg;\n        this._reKey = makeKeyRe(true, true);\n        this._handleKey = this._handleKey.bind(this);\n        this.setElement(elem);\n    }\n\n    MarkdownArea.prototype = {\n        constructor: MarkdownArea,\n\n        getElement: function () {\n            return this._elem;\n        },\n\n        setElement: function (elem) {\n            if (this._elem) {\n                this._elem.removeEventListener('keydown', this._handleKey);\n            }\n\n            this._elem = elem;\n            elem.addEventListener('keydown', this._handleKey);\n        },\n\n        getValue: function () {\n            return this._elem.value;\n        },\n\n        setValue: function (value) {\n            this._elem.value = value;\n        },\n\n        getIndent: function () {\n            return this._indent;\n        },\n\n        setIndent: function (indent) {\n            if (typeof indent === 'number') {\n                this._indent = new Array(indent + 1).join(' ');\n            } else {\n                this._indent = (indent + '').replace(/[^ \\t]/g, ' ');\n            }\n\n            this._reOutdent = new RegExp('^' + this._indent, 'mg');\n        },\n\n        isTabUsed: function () {\n            return this._useTab;\n        },\n\n        useTab: function () {\n            this._useTab = true;\n            this._reKey = makeKeyRe(true, this._useInline);\n        },\n\n        ignoreTab: function () {\n            this._useTab = false;\n            this._reKey = makeKeyRe(false, this._useInline);\n        },\n\n        isInlineEnabled: function() {\n            return this._useInline;\n        },\n\n        enableInline: function () {\n            this._useInline = true;\n            this._reKey = makeKeyRe(this._useTab, true);\n        },\n\n        disableInline: function () {\n            this._useInline = false;\n            this._reKey = makeKeyRe(this._useTab, false);\n        },\n\n        destroy: function () {\n            this._elem.removeEventListener('keydown', this._handleKey);\n            this._elem = this._reKey = this._handleKey = this._indent = this._reOutdent = null;\n        },\n\n        _handleKey: function (evt) {\n            if (this._reKey.test(evt.key)) {\n                evt.preventDefault();\n\n                var prefix = evt.target.value.substring(0, evt.target.selectionStart),\n                    selection = evt.target.value.substring(evt.target.selectionStart, evt.target.selectionEnd),\n                    postfix = evt.target.value.substring(evt.target.selectionEnd);\n\n                if (evt.key === 'Enter') {\n                    handleEnterKey(this._elem, prefix, selection, postfix, evt.shiftKey);\n                } else if (evt.key === 'Tab' || evt.key === 'i' && evt[ctrlKey]) {\n                    handleIndentKey(this._elem, prefix, selection, postfix, this._indent);\n                } else if (evt.key === 'Tab' && evt.shiftKey || evt.key === 'o' && evt[ctrlKey]) {\n                    handleOutdentKey(this._elem, prefix, selection, postfix, this._indent, this._reOutdent);\n                } else if (reInlineKey.test(evt.key)) {\n                    handleInlineKey(this._elem, prefix, selection, postfix, evt.key);\n                }\n            }\n        }\n    };\n\n\n    function makeKeyRe(tab, inline) {\n        return new RegExp('^(?:Enter' + (tab ? '|Tab' : '') + '|[io' + (inline ? '`*_([{<' : '') + '])$');\n    }\n\n\n    function handleEnterKey (elem, prefix, selection, postfix, shift) {\n        if (selection) {\n            return;\n        }\n\n        var info = getLineInfo(prefix);\n\n        if (info.prefix) {\n            if (!shift && info.prefix === info.line) {\n                prefix = prefix.substring(0, info.offset) + stripLast(info.prefix);\n            } else if (!shift && isList(info.prefix)) {\n                prefix += \"\\n\" + increment(info.prefix);\n            } else {\n                prefix += \"\\n\" + toIndent(info.prefix, shift);\n            }\n        } else {\n            prefix += \"\\n\";\n        }\n\n        apply(elem, prefix + postfix, prefix.length, 0);\n    }\n\n    function handleIndentKey (elem, prefix, selection, postfix, indent) {\n        var s = prefix.length,\n            n = prefix.lastIndexOf(\"\\n\") + 1;\n\n        if (n < s) {\n            selection = prefix.substring(n) + selection;\n            prefix = prefix.substring(0, n);\n            s += indent.length;\n        }\n\n        if (selection) {\n            selection = selection.replace(reMkIndent, indent);\n        } else {\n            selection = indent;\n            s += indent.length;\n        }\n\n        apply(elem, prefix + selection + postfix, s, selection.length);\n    }\n\n    function handleOutdentKey (elem, prefix, selection, postfix, indent, reOutdent) {\n        var s = prefix.length,\n            n = prefix.lastIndexOf(\"\\n\") + 1;\n\n        if (n < s) {\n            selection = prefix.substring(n) + selection;\n            prefix = prefix.substring(0, n);\n\n            if (selection.substring(0, indent.length) === indent) {\n                s -= indent.length;\n            }\n        }\n\n        apply(elem, prefix + selection.replace(reOutdent, '') + postfix, s, selection.length);\n    }\n\n    function handleInlineKey (elem, prefix, selection, postfix, key) {\n        apply(\n            elem,\n            prefix + key + selection + (parentheses[key] || key) + postfix,\n            prefix.length + 1,\n            selection.length\n        );\n    }\n\n    function apply(elem, value, s, n) {\n        elem.value = value;\n        elem.selectionStart = s;\n        elem.selectionEnd = s + n;\n    }\n\n    function getLineInfo(str) {\n        var offset = str.lastIndexOf(\"\\n\") + 1,\n            line = str.substring(offset),\n            m = rePrefix.exec(line);\n\n        return {\n            line: line,\n            offset: offset,\n            prefix: m && m[0]\n        };\n    }\n\n    function isList(prefix) {\n        return reList.test(prefix);\n    }\n\n    function toIndent(prefix, pure) {\n        return prefix.replace(pure ? rePureIndent : reCleanIndent, ' ');\n    }\n\n    function increment(prefix) {\n        return prefix.replace(reIncrement, function (_, n) {\n            return (parseInt(n) + 1) + '.';\n        })\n    }\n\n    function stripLast(prefix) {\n        return prefix.replace(reStripLast, '');\n    }\n\n\n    return MarkdownArea;\n\n});\n"]}